pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = 'dockerhub-cred' 
        DOCKERHUB_USERNAME = 'gopinathgb'                 
        API_IMAGE = 'multiapp_api:v2'
        FRONTEND_IMAGE = 'multiapp_frontend:v2'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git(
                    url: 'https://github.com/gopi-ganesan/multi-server.git',
                    branch: 'main',
                    credentialsId: 'github-token'
                )
            }
        }

        stage('Build Docker Images') {
            steps {
                dir('multiapp') {
                    echo 'Building Docker images with docker-compose...'
                    sh 'docker-compose -f docker-compose.yml build'
                }
            }
        }

        stage('Push Images to DockerHub') {
            steps {
                dir('multiapp') {
                    withCredentials([string(credentialsId: 'dockerhub-password', variable: 'DOCKERHUB_PASSWORD')]) {
                        echo 'Logging in to DockerHub...'
                        sh "echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin"

                        echo 'Tagging API image...'
                        sh "docker tag multiapp-api $DOCKERHUB_USERNAME/$API_IMAGE"

                        echo 'Tagging Frontend image...'
                        sh "docker tag multiapp-frontend $DOCKERHUB_USERNAME/$FRONTEND_IMAGE"

                        echo 'Pushing API image...'
                        sh "docker push $DOCKERHUB_USERNAME/$API_IMAGE"

                        echo 'Pushing Frontend image...'
                        sh "docker push $DOCKERHUB_USERNAME/$FRONTEND_IMAGE"
                    }
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                dir('multiapp') {
                    echo 'Deploying services...'
                    sh 'docker-compose -f docker-compose.yml up -d'
                }
            }
        }

        stage('Test Services') {
            steps {
                echo 'Testing if services are running...'
                sh 'docker ps'
            }
        }
    }

    post {
        failure {
            echo 'Deployment failed!'
        }
        success {
            echo 'Deployment completed successfully!'
        }
    }
}
